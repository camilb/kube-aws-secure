
clusterName: demokube #has to be the same as KUBERNETES_CLUSTER var in vpc/deploy
releaseChannel: stable
apiEndpoints:
- name: default
  dnsName: kubeapi.domain_name
  loadBalancer:
    subnets:
    - name: PrivateSubnetA
    - name: PrivateSubnetB
    - name: PrivateSubnetC
    private: true
    type: network
    recordSetTTL: 300
    hostedZone:
      id: hosted_zone_id
keyName: key_name
region: aws_region
kmsKeyArn: "kms_key_arn"

controller:
  createTimeout: PT60M
  instanceType: t2.medium
  rootVolume:
    size: 30
    type: gp2
  autoScalingGroup:
    minSize: 1
    maxSize: 3
    rollingUpdateMinInstancesInService: 2
  iam:
     role:
        name: "controllerMR"
  subnets:
  - name: PrivateSubnetA
  - name: PrivateSubnetB
  - name: PrivateSubnetC
  nodeLabels:
    kube-aws.coreos.com/role: controller
worker:
  nodePools:
    - name: nodepool1
      subnets:
      - name: PrivateSubnetA
      - name: PrivateSubnetB
      - name: PrivateSubnetC
      iam:
        role:
          name: "workerMR"
      instanceType: t2.medium
      rootVolume:
        size: 30
        type: gp2
      createTimeout: PT60M
      waitSignal:
        enabled: true
        maxBatchSize: 1
      autoScalingGroup:
        minSize: 1
        maxSize: 3
        rollingUpdateMinInstancesInService: 2
      autoscaling:
        clusterAutoscaler:
          enabled: true
      awsNodeLabels:
        enabled: true
      clusterAutoscalerSupport:
        enabled: true
      kube2IamSupport:
        enabled: true
      nodeLabels:
        kube-aws.coreos.com/role: worker
etcd:
  count: 1
  instanceType: t2.medium
  rootVolume:
    size: 30
    type: gp2
  dataVolume:
    size: 30
    type: gp2
    encrypted: true
  subnets:
  - name: PrivateSubnetA
  - name: PrivateSubnetB
  - name: PrivateSubnetC
  version: 3.2.10
  snapshot:
    automated: true
  disasterRecovery:
    automated: false
vpc:
  id: vpc_id
  routeTableId: route_table_id
  vpcCIDR: "vpc_cidr"
subnets:
- name: PrivateSubnetA
  availabilityZone: aws_regiona
  id: "private_subnet_a"

- name: PrivateSubnetB
  availabilityZone: aws_regionb
  id: "private_subnet_b"

- name: PrivateSubnetC
  availabilityZone: aws_regionc
  id: "private_subnet_c"
tlsCADurationDays: 3650
tlsCertDurationDays: 365
kubernetesVersion: v1.8.4
hyperkubeImage:
  repo: gcr.io/google-containers/hyperkube-amd64
  rktPullDocker: true
useCalico: true
kubeResourcesAutosave:
  enabled: true
kubeDashboardAdminPrivileges: false
cloudWatchLogging:
 enabled: true
 retentionInDays: 7
 localStreaming:
  enabled: true
cloudFormationStreaming: true
addons:
  clusterAutoscaler:
    enabled: true
  rescheduler:
    enabled: true
experimental:
   admission:
     initializers:
       enabled: true
   authentication:
   awsNodeLabels:
     enabled: true
   tlsBootstrap:
     enabled: true
   nodeAuthorizer:
     enabled: true
   nodeDrainer:
     enabled: true
     drainTimeout: 5
   oidc:
     enabled: true
     issuerUrl: "https://accounts.google.com"
     clientId: "kubernetes"
     usernameClaim: "email"
     groupsClaim: "groups"
stackTags:
  Name: "Kubernetes"
  Environment: "Development"
