AWSTemplateFormatVersion: '2010-09-09'
Description: kube-aws-secure VPC (Public and Private Subnets, IGW, Route Tables, KMS)

Parameters:
  Role:
    Type: String
  ServiceNamePrefix:
    Type: String
  KubernetesCluster:
    Type: String

Mappings:
  ConfigMap:
    Environment:
      VPC:            10.0.0.0/16

      PublicSubnetA:  10.0.101.0/24
      PublicSubnetB:  10.0.102.0/24
      PublicSubnetC:  10.0.103.0/24

      PrivateSubnetA: 10.0.1.0/24
      PrivateSubnetB: 10.0.2.0/24
      PrivateSubnetC: 10.0.3.0/24

      FnGetAZs:       ["aws_regiona", "aws_regionb", "aws_regionc"]

Resources:
  #KMS
  KubeAwsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KubeAWS KMS key"
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub "key-k8s"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:sts::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
  # VPC
  KubeAwsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:          !FindInMap [ConfigMap, Environment, VPC]
      EnableDnsSupport:   true
      EnableDnsHostnames: true
      InstanceTenancy:    default
      Tags:
        - Key:   Name
          Value: !Ref ServiceNamePrefix
        - Key:   Role
          Value: !Ref Role

#DHCP Options
  KubeDhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-dhcp-options"
        - Key:   Role
          Value: !Ref Role

  KubeVPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: KubeAwsVPC
      DhcpOptionsId:
        Ref: KubeDhcpOptions

  # IGW
  PublicInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-igw"
        - Key:   Role
          Value: !Ref Role

  PublicVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:             !Ref KubeAwsVPC
      InternetGatewayId: !Ref PublicInternetGateway

  # Nat GW

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId:     !Ref PublicSubnetA

  PublicVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:             !Ref KubeAwsVPC
      InternetGatewayId: !Ref PublicInternetGateway

  ### Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref KubeAwsVPC
      CidrBlock:           !FindInMap [ConfigMap, Environment, PublicSubnetA]
      MapPublicIpOnLaunch: true
      AvailabilityZone:    !Select [0, !FindInMap [ConfigMap, Environment, FnGetAZs]]
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-public-subnet-a"
        - Key:   Role
          Value: !Ref Role
        - Key:   KubernetesCluster
          Value: !Ref KubernetesCluster

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref KubeAwsVPC
      CidrBlock:           !FindInMap [ConfigMap, Environment, PublicSubnetB]
      MapPublicIpOnLaunch: true
      AvailabilityZone:    !Select [1, !FindInMap [ConfigMap, Environment, FnGetAZs]]
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-public-subnet-b"
        - Key:   Role
          Value: !Ref Role
        - Key:   KubernetesCluster
          Value: !Ref KubernetesCluster

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref KubeAwsVPC
      CidrBlock:           !FindInMap [ConfigMap, Environment, PublicSubnetC]
      MapPublicIpOnLaunch: true
      AvailabilityZone:    !Select [2, !FindInMap [ConfigMap, Environment, FnGetAZs]]
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-public-subnet-c"
        - Key:   Role
          Value: !Ref Role
        - Key:   KubernetesCluster
          Value: !Ref KubernetesCluster

  ### Private Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:            !Ref KubeAwsVPC
      CidrBlock:        !FindInMap [ConfigMap, Environment, PrivateSubnetA]
      AvailabilityZone: !Select [0, !FindInMap [ConfigMap, Environment, FnGetAZs]]
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-private-subnet-a"
        - Key:   Role
          Value: !Ref Role

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:            !Ref KubeAwsVPC
      CidrBlock:        !FindInMap [ConfigMap, Environment, PrivateSubnetB]
      AvailabilityZone: !Select [1, !FindInMap [ConfigMap, Environment, FnGetAZs]]
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-private-subnet-b"
        - Key:   Role
          Value: !Ref Role

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:            !Ref KubeAwsVPC
      CidrBlock:        !FindInMap [ConfigMap, Environment, PrivateSubnetC]
      AvailabilityZone: !Select [2, !FindInMap [ConfigMap, Environment, FnGetAZs]]
      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-private-subnet-c"
        - Key:   Role
          Value: !Ref Role

  ### Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KubeAwsVPC

      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-public-routes"
        - Key:   Role
          Value: !Ref Role

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId:     !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId:     !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId:     !Ref PublicSubnetC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:         !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:            !Ref PublicInternetGateway

  ### Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KubeAwsVPC

      Tags:
        - Key:   Name
          Value: !Sub "${ServiceNamePrefix}-private-routes"
        - Key:   Role
          Value: !Ref Role

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:     !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:     !Ref PrivateSubnetB

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:     !Ref PrivateSubnetC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:         !Ref PrivateRouteTable
      NatGatewayId:         !Ref NATGateway



Outputs:
  VpcId:
    Value: !Ref KubeAwsVPC

  CidrBlock:
    Value: !GetAtt KubeAwsVPC.CidrBlock

  PublicRouteTableId:
    Value: !Ref PublicRouteTable
  PrivateRouteTableId:
    Value: !Ref PrivateRouteTable

  PublicSubnetAId:
    Value: !Ref PublicSubnetA
  PublicSubnetBId:
    Value: !Ref PublicSubnetB
  PublicSubnetCId:
    Value: !Ref PublicSubnetC

  PrivateSubnetAId:
    Value: !Ref PrivateSubnetA
  PrivateSubnetBId:
    Value: !Ref PrivateSubnetB
  PrivateSubnetCId:
    Value: !Ref PrivateSubnetC

  KMSKeyArn:
    Value: !GetAtt KubeAwsKey.Arn
